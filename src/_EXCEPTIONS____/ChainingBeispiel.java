package _EXCEPTIONS____;

import java.io.FileWriter;
import java.io.IOException;

public class ChainingBeispiel {

    public static void main(String[] args) {

        try {
            speichereDaten();
        } catch (RuntimeException e) {
            System.out.println("‚ö†Ô∏è Oberste Fehlermeldung: " + e.getMessage());

            // Originale Ursache anzeigen:
            System.out.println("üí• Urspr√ºngliche Ursache: " + e.getCause());
        }
    }

    // Methode: F√§ngt IOException ab, verpackt sie in RuntimeException
    public static void speichereDaten() {
        try {
            // Dateipfad ist ung√ºltig ‚Üí l√∂st IOException aus
            FileWriter writer = new FileWriter("/ung√ºltiger/pfad/datei.txt");
            writer.write("Test");
            writer.close();
        } catch (IOException ex) {
            // Hier CHAINING: neue Exception + urspr√ºngliche anh√§ngen
            throw new RuntimeException("Speichern fehlgeschlagen!", ex);
        }
    }
}
/*‚úÖ FileWriter kann eine IOException werfen, zum Beispiel wenn:
	‚Ä¢	Der Pfad nicht existiert
	‚Ä¢	Du keine Schreibrechte hast
	‚Ä¢	Die Festplatte voll ist

‚û°Ô∏è Das musst du technisch abfangen, weil IOException checked ist.

‚∏ª

Warum throw new RuntimeException(..., ex)?
	‚Ä¢	RuntimeException ist unchecked ‚Üí du musst sie im Methodenkopf nicht weitergeben
	‚Ä¢	Trotzdem willst du den urspr√ºnglichen Fehler nicht verlieren
	‚Ä¢	Deswegen h√§ngst du die Original-Exception mit ex an ‚Üí das nennt man Exception Chaining
		‚Ä¢	"Oberste Meldung" ‚Üí Deine eigene, verst√§ndliche Fehlerbeschreibung
	‚Ä¢	ex ‚Üí Die technische Ursache (IOException), die drangeh√§ngt wird

‚∏ª

Vorteil:
	‚Ä¢	Au√üenstehender Code sieht beides:
	‚Ä¢	Deine klare Meldung
	‚Ä¢	Die urspr√ºngliche Ursache mit allen Details (z.B. Pfad ung√ºltig)
*/
