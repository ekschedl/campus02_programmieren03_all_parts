package _THREADS___;

public class RunnableExample implements Runnable {

        public static void main(String[] args) {
            /*
             * Ein Thread ist ein Ausf√ºhrungsstrang innerhalb eines Programms.
             * Die Java Virtual Machine (JVM) erlaubt es, dass ein Programm mehrere Threads gleichzeitig ausf√ºhrt.
             *
             * Thread.currentThread(): Liefert eine Referenz auf das aktuell laufende Thread-Objekt.
             * .getName(): Gibt den Namen des Threads zur√ºck.
             */

            System.out.println("Inside : " + Thread.currentThread().getName());
            // Zeigt an, welcher Thread gerade den Code ausf√ºhrt (im Main-Thread)

            System.out.println("Creating Runnable ...");
            Runnable runnable = new RunnableExample();
            // Runnable-Objekt wird erstellt, Runnable definiert die Logik f√ºr den Thread

            System.out.println("Creating Thread ...");
            Thread thread = new Thread(runnable); // Neuer Thread wird erstellt, Status: NEU (noch nicht gestartet)

            // Optional k√∂nnte man hier den Namen des Threads setzen:
            // thread.setName("MeinNeuerThread");

            System.out.println(thread.getName()); // Gibt aktuellen Namen des Threads aus (Standardname, z. B. Thread-0)

            System.out.println("Starting Thread");
            thread.start();
            // Startet den neuen Thread, JVM ruft dann automatisch die run()-Methode auf
        }

        @Override
        public void run() {
            // Diese Methode wird ausgef√ºhrt, wenn der Thread gestartet wird
            System.out.println("Inside new Thread : " + Thread.currentThread().getName());
            // Zeigt an, welcher Thread die run()-Methode ausf√ºhrt
        }
    }

/*
Main: Hello from 'main'
Dog: Hallo ich bin ein Dog und ein Thread gleichzeitig
dogThread state: RUNNABLE
Dog: Mein Thread Name: Thread-0
Dog: Ich arbeite gerade! Solange isRunning == true.
Dog: Ich arbeite gerade! Solange isRunning == true.
Dog: Ich arbeite gerade! Solange isRunning == true.
Dog: Ich arbeite gerade! Solange isRunning == true.
Dog: Ich arbeite gerade! Solange isRunning == true.
Dog: Ich arbeite gerade! Solange isRunning == true.
dogThread state: TIMED_WAITING
Request shutdown wurde von folgendem Thread ausgef√ºhrt:main
Dog: ich beende mich.
dogThread state nach join: TERMINATED
Main: Main beendet sich.

1Ô∏è‚É£ Startausgabe:
Main: Hello from 'main'
‚û° Dein Hauptprogramm (main-Thread) startet und gibt diese Begr√º√üung aus.

2Ô∏è‚É£ Hund-Thread wird gestartet:
Dog: Hallo ich bin ein Dog und ein Thread gleichzeitig
‚û° Die Dog-Klasse ist ein eigener Thread, der gerade parallel gestartet wurde.

dogThread state: RUNNABLE
‚û° RUNNABLE bedeutet: Der Thread ist startbereit oder l√§uft bereits (genau in dem Moment ist er entweder aktiv oder wartet auf CPU-Zeit).

3Ô∏è‚É£ Arbeitsphase vom Dog-Thread:
Dog: Mein Thread Name: Thread-0
‚û° Der Hund gibt seinen aktuellen Thread-Namen aus (standardm√§√üig von der JVM vergeben: Thread-0).

Dog: Ich arbeite gerade! Solange isRunning == true.
‚û° Das wiederholt sich mehrmals ‚Üí Der Thread f√ºhrt Schleifen aus, solange das Steuerungsflag isRunning true ist.

4Ô∏è‚É£ Schlafphase:
dogThread state: TIMED_WAITING
‚û° Dein Thread schl√§ft kurz mit Thread.sleep() ‚Üí deshalb wechselt der Zustand auf TIMED_WAITING.
TIMED_WAITING bedeutet: Der Thread pausiert f√ºr eine bestimmte Zeit (z.‚ÄØB. durch sleep() oder wait(timeout)).

5Ô∏è‚É£ Shutdown wird eingeleitet:
Request shutdown wurde von folgendem Thread ausgef√ºhrt: main
‚û° Dein Hauptthread (main) setzt das Flag isRunning = false, signalisiert dem Hund also: Bitte aufh√∂ren.

6Ô∏è‚É£ Hund-Thread beendet sich sauber:
Dog: ich beende mich.
‚û° Die Schleife erkennt isRunning == false und der Hund-Thread verl√§sst die Schleife und beendet sich.

7Ô∏è‚É£ Join und finaler Zustand:
dogThread state nach join: TERMINATED
‚û° join() wurde benutzt, das hei√üt: Der Hauptthread wartet, bis der Hund-Thread fertig ist. Danach hat der Hund den Zustand TERMINATED ‚Üí der Thread ist sauber beendet.

8Ô∏è‚É£ Hauptthread beendet sich:
Main: Main beendet sich.
‚û° Auch dein Hauptthread ist jetzt fertig.

üü¢ Zusammenfassung der Zust√§nde:

‚úÖ RUNNABLE ‚Üí Thread aktiv oder startbereit
‚úÖ TIMED_WAITING ‚Üí Thread pausiert (z.bB. durch sleep())
‚úÖ TERMINATED ‚Üí Thread sauber beendet
*/